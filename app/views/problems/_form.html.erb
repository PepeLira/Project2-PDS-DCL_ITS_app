<%= form_with(model: problem) do |form| %>
  <% if problem.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(problem.errors.count, "error") %> prohibited this problem from being saved:</h2>

      <ul>
        <% problem.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <%= form.hidden_field :admin_teacher_id, :value => 1 %>

  <div class="field">
    <%= form.label :title, style: "display: block" %>
    <%= form.text_field :title, :value => @title%>
  </div>

  <div class="field">
    <%= form.label :description, style: "display: block" %>
    <%= form.text_area :description %>
  </div>

  <div class="field">
    <%= form.label "Dibujar el diagrama para un DCL", style: "display: block" %>
    <p>Circulo para nodos</p>
    <p>Circulo sin relleno para apoyo deslizante</p>
    <p>Triangulo para apoyo fijo</p>
    <p>rombo relleno para rotula</p>
    <p>rombo sin relleno para biela</p>
    <p>X para empotrado</p>
    <p>+ para momento</p>
    <script type="text/javascript">
      // var myNodes = document.getElementsByName("myNodes")[0]; // lista de puntos
      //var mySegments = []; // lista de conexiones
      //var mySavedLink = ''; //saved link total state
      var params = {"appName": "classic",
                      "width":800,
                      "height":600,
                      "showToolBar":true,
                      "borderColor":null,
                      "showMenuBar":true,
                      "customToolbar":"0 || 1 || 15 || 7 ",
                      "allowStyleBar":true,
                      "showAlgebraInput":true,
                      "enableLabelDrags":false,
                      "enableShiftDragZoom":true,
                      "capturingThreshold":null,
                      "showToolBarHelp":false,
                      "errorDialogsActive":true,
                      "showTutorialLink":true,
                      "showLogging":true,
                      "useBrowserForJS":true,
                      "perspective":2,
                      "grid":true};
      params.appletOnLoad = function(api) {
          api.setGridVisible(true);
          var strLength = 150;
          var myNodes = document.getElementById("myNodes"); // lista de puntos
          var mySegments = document.getElementById("mySegments"); // lista de segmentos y vectores
          var mySavedLink = document.getElementById("mySavedLink"); //saved link total state
          //var textarea1 = document.getElementsByName("textarea1")[0];
          //var textarea2 = document.getElementsByName("textarea2")[0];
          //var consState = document.getElementsByName("consState")[0];
          function addListener(objName) { 
              //textarea1.value = "add: " + objName + "\n" + textarea1.value.substring(0, strLength );	
              printConstructionState();
          }

          function removeListener(objName) {
              //textarea1.value = "remove: " + objName + "\n" + textarea1.value.substring(0, strLength );	
              printConstructionState();
          }

          function renameListener(oldObjName, newObjName) {
              //textarea1.value = "rename: " + objName + "\n" + textarea1.value.substring(0, strLength );	
              printConstructionState();
          }

          function updateListener(objName) {
              //strVal = api.getValueString(objName);
              //textarea2.value = strVal + "\n" + textarea2.value.substring(0, strLength );
          }

          function clearListener() {
              //textarea1.value = "";
              //textarea2.value = "";
              //textarea1.value = "construction cleared";
              //consState.value = "";
          }

          function printConstructionState() {
              var objNumber = api.getObjectNumber();
              var strState = "Number of objects: " + objNumber;
              var subl = []; //lista de puntos
              var node_value = {
                    nombre: '',
                    tipo: 0,
                    x: 0,
                    y: 0
                };          
              var lconx = []; //lista conexiones
              for (i=0; i < objNumber; i++) {
                  var subl2 = []; // lista por punto
                  var lconx2 = [];// lista por conexion
                  strName = api.getObjectName(i);                    
                  strType = api.getObjectType(strName);                    
                  if (strType === 'point') {
                      node_value.nombre = strName;
                      node_value.tipo = api.getPointStyle(strName);
                      node_value.x = api.getXcoord(strName);
                      node_value.y = api.getYcoord(strName);
                      subl2.push(JSON.stringify(node_value));
                      subl.push(subl2);
                      strState += "\n" + strName+ ' x: ' + node_value.x + ' y: ' + node_value.y + ' style: '+ node_value.tipo;
                  } else if (strType === 'segment' || strType === 'vector') {
                      var smt_vct_values = {
                        iType: api.getDefinitionString(strName),
                        iLength: api.getValue(strName)
                      };
                      strState += "\n" + smt_vct_values.iType + ' L: ' + smt_vct_values.iLength;
                      lconx2.push(JSON.stringify(smt_vct_values));
                      lconx.push(lconx2);
                  }                    
                  //strCommand = api.getCommandString(strName);
                  //strapdesc = api.getValue(strName);
                  //strState += "\n" + strType + " " + strName + ", " + strCommand + "," + strapdesc;
              }
              mySegments.value = lconx;
              mySavedLink.value = api.getBase64();              
              myNodes.value = subl; // lista de puntos
              //consState.value = strState;
          }
          // register add, remove, rename and update listeners
          api.registerAddListener(addListener);
          api.registerRemoveListener(removeListener);
          api.registerRenameListener(renameListener);
          api.registerClearListener(clearListener);
          api.registerUpdateListener(updateListener);
      }
      var applet = new GGBApplet(params, true);
      window.addEventListener("load", function() { 
          applet.inject('ggb-element');
      });

      function mchange(){
          var buttonFinished = document.getElementById("isFinished");
          var pid = document.getElementById("ihavename");
          pid.innerHTML = applet.getBase64();
      }  
    </script>

    <div id="ggb-element"></div> 

    <h3>Construction State Listening</h3>

    <%= form.fields_for :structure do |s| %>
      <div class="field">
        <%= s.label :nodes_list %><br />
        <%= s.text_area :nodes_list, id: "myNodes"%>
      </div>
      <div class="field">
        <%= s.label :segments_list %><br />
        <%= s.text_area :segments_list, id: "mySegments" %>
      </div>
      <div class="field">
        <%= s.label :struct_link %><br />
        <%= s.text_area :struct_link, id: "mySavedLink" %>
      </div>
      <div class="field">
        <%= s.label :force_values %><br />
        <%= s.text_field :force_values %>
      </div>
      <div class="field">
        <%= s.label :moment_values %><br />
        <%= s.text_field :moment_values %>
      </div> 
      <%= s.hidden_field :admin_teacher_id, :value => 1 %>
    <% end %>
    <div>
      <button id="isFinished" onclick="mchange()">Done</button>
    </div>
  </div>


  <br>
  <div>
    <%= form.submit %>
  </div>
<% end %>
